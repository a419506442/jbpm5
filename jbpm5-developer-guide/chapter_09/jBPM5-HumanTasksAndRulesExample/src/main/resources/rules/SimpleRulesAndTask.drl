package com.wordpress.salaboy.humantasks;

import org.jbpm.task.Task;
import org.jbpm.task.User;
import com.wordpress.salaboy.*;

declare WaterFlowingEvent
    @role( event)
    @expires (10m)
end

query "getAverage" ()
    $currentAverage: Average()
end

rule "Update the Average"
    no-loop true
    when
     $currentAverage: Average()
     $average: Double() from accumulate(
            WaterFlowingEvent($value: value) over window:time(5s) from entry-point "water-events", 
            average($value))
    then
        $currentAverage.setValue($average);
        update($currentAverage);    
end

rule "Meausure WaterFlowing Event Average and react if threshold is breached"
    no-loop true
    when
        not(ThresholdBreached())
        $threshold: Threshold(name == "AverageThreshold", $valueUpperThreshold:valueUpperThreshold, $valueLowerThreshold: valueLowerThreshold)
        $average: Double() from accumulate(
            WaterFlowingEvent($value: value) over window:time(5s) from entry-point "water-events", 
            average($value))
        eval($average.doubleValue() > $valueUpperThreshold || $average.doubleValue() < $valueLowerThreshold)
        $task: Task()
        $user: User()
        
    then
    	System.out.println("addTask");
        Task task = TaskClientHelper.getInstance().addTask($task, null);
        $task.setId(task.getId());
        update($task);
        insert(new ThresholdBreached(task.getId()));
end

rule "If the threshold was breached buy now the average returns to normal cancel the task that was created"
    no-loop true
    when
    	
        $threshold: Threshold(name == "AverageThreshold",  $valueUpperThreshold: valueUpperThreshold,  $valueLowerThreshold: valueLowerThreshold )
        $average: Double() from accumulate(
            $acc: WaterFlowingEvent($value: value) over window:time(5s) from entry-point "water-events", 
            average($value)
        )
        eval($average.doubleValue() < $valueUpperThreshold && $average.doubleValue() > $valueLowerThreshold)
        $task: Task()
        $thresholdBreached: ThresholdBreached(taskId == $task.id)
        
        $user: User()
       
        
    then
        System.out.println("forward");
        TaskClientHelper.getInstance().forward($task, $user);
        retract($thresholdBreached);
        retract($task);
end


